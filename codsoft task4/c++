#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    bool isCompleted;
};

vector<Task> tasks;

// Function to add a task
void addTask() {
    Task task;
    cout << "Enter task description: ";
    getline(cin, task.description);
    task.isCompleted = false;
    tasks.push_back(task);
    cout << "Task added successfully!" << endl;
}

// Function to view tasks
void viewTasks() {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
        return;
    }
    cout << "Tasks:" << endl;
    for (int i = 0; i < tasks.size(); i++) {
        cout << (i + 1) << ". " << tasks[i].description << " - " << (tasks[i].isCompleted ? "Completed" : "Pending") << endl;
    }
}

// Function to mark a task as completed
void markTaskAsCompleted() {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
        return;
    }
    int taskNumber;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskNumber;
    if (taskNumber < 1 || taskNumber > tasks.size()) {
        cout << "Invalid task number." << endl;
        return;
    }
    tasks[taskNumber - 1].isCompleted = true;
    cout << "Task marked as completed successfully!" << endl;
}

// Function to remove a task
void removeTask() {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
        return;
    }
    int taskNumber;
    cout << "Enter the task number to remove: ";
    cin >> taskNumber;
    if (taskNumber < 1 || taskNumber > tasks.size()) {
        cout << "Invalid task number." << endl;
        return;
    }
    tasks.erase(tasks.begin() + taskNumber - 1);
    cout << "Task removed successfully!" << endl;
}

int main() {
    int choice;
    while (true) {
        cout << "To-Do List Manager" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Ignore the newline character
        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                markTaskAsCompleted();
                break;
            case 4:
                removeTask();
                break;
            case 5:
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
    return 0;
}